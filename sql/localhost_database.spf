<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<data>
	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
	4Um20BMKUQ45dw3BlYzv/Dtb3Q==
	</data>
	<key>encrypted</key>
	<true/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>DROP PROCEDURE IF EXISTS PPOS_TAG;
CREATE PROCEDURE PPOS_TAGGING (IN VPOS_TAG VARCHAR(50))
BEGIN
     INSERT INTO POS_TAGGING VALUES (NULL,VPOS_TAG);
END;
CALL PPOS_TAGGING("ADVERBE");
CALL PPOS_TAGGING("SUJET")</string>
		<string>DROP PROCEDURE IF EXISTS PENTITE;
CREATE PROCEDURE PENTITE (IN VENTITE VARCHAR(50))   
BEGIN
     INSERT INTO ENTITE VALUES (NULL,VENTITE);
END;
CALL PENTITE("PERSONNE");
CALL PENTITE("LIEU")</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE);
CALL PMOT("PHP", "JAVA", @ID_RACINE);
SELECT @ID_RACINE</string>
		<string>#------------------------------------------------------------
#        Script MySQL.
#------------------------------------------------------------


#------------------------------------------------------------
# Table: article
#------------------------------------------------------------

CREATE TABLE article(
        id_article               int (11) Auto_increment  NOT NULL ,
        date_publication         Date ,
        id_journal_journal       Int NOT NULL ,
        id_classe_classification Int NOT NULL ,
        id_positivite_positivite Int NOT NULL ,
        PRIMARY KEY (id_article )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: journal
#------------------------------------------------------------

CREATE TABLE journal(
        id_journal  int (11) Auto_increment  NOT NULL ,
        nom_journal Varchar (50) ,
        PRIMARY KEY (id_journal ) ,
        UNIQUE (nom_journal )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: auteur
#------------------------------------------------------------

CREATE TABLE auteur(
        id_auteur     int (11) Auto_increment  NOT NULL ,
        nom_auteur    Varchar (50) ,
        prenom_auteur Varchar (50) ,
        PRIMARY KEY (id_auteur )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: classification
#------------------------------------------------------------

CREATE TABLE classification(
        id_classe int (11) Auto_increment  NOT NULL ,
        classe    Varchar (25) ,
        PRIMARY KEY (id_classe ) ,
        UNIQUE (classe )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: positivite
#------------------------------------------------------------

CREATE TABLE positivite(
        id_positivite int (11) Auto_increment  NOT NULL ,
        positivite    Bool ,
        PRIMARY KEY (id_positivite ) ,
        UNIQUE (positivite )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: mot_racine
#------------------------------------------------------------

CREATE TABLE mot_racine(
        id_racine  int (11) Auto_increment  NOT NULL ,
        mot        Varchar (25) ,
        id_mot_mot Int NOT NULL ,
        PRIMARY KEY (id_racine ) ,
        UNIQUE (mot )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: entite
#------------------------------------------------------------

CREATE TABLE entite(
        id_entite   int (11) Auto_increment  NOT NULL ,
        type_entite Varchar (25) ,
        PRIMARY KEY (id_entite ) ,
        UNIQUE (type_entite )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: mot
#------------------------------------------------------------

CREATE TABLE mot(
        id_mot int (11) Auto_increment  NOT NULL ,
        mot    Varchar (50) NOT NULL ,
        PRIMARY KEY (id_mot ) ,
        UNIQUE (mot )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: pos_tagging
#------------------------------------------------------------

CREATE TABLE pos_tagging(
        id_pos_tag int (11) Auto_increment  NOT NULL ,
        pos_tag    Varchar (25) ,
        PRIMARY KEY (id_pos_tag ) ,
        UNIQUE (pos_tag )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: ecrit
#------------------------------------------------------------

CREATE TABLE ecrit(
        id_article_article Int NOT NULL ,
        id_auteur_auteur   Int NOT NULL ,
        PRIMARY KEY (id_article_article ,id_auteur_auteur )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: apparaitre
#------------------------------------------------------------

CREATE TABLE apparaitre(
        position               Int ,
        id_racine_mot_racine   Int NOT NULL ,
        id_article_article     Int NOT NULL ,
        id_entite_entite       Int NOT NULL ,
        id_pos_tag_pos_tagging Int NOT NULL ,
        PRIMARY KEY (id_racine_mot_racine ,id_article_article ,id_entite_entite ,id_pos_tag_pos_tagging )
)ENGINE=InnoDB;
ALTER TABLE article ADD CONSTRAINT FK_article_id_journal_journal FOREIGN KEY (id_journal_journal) REFERENCES journal(id_journal);
ALTER TABLE article ADD CONSTRAINT FK_article_id_classe_classification FOREIGN KEY (id_classe_classification) REFERENCES classification(id_classe);
ALTER TABLE article ADD CONSTRAINT FK_article_id_positivite_positivite FOREIGN KEY (id_positivite_positivite) REFERENCES positivite(id_positivite);
ALTER TABLE mot_racine ADD CONSTRAINT FK_mot_racine_id_mot_mot FOREIGN KEY (id_mot_mot) REFERENCES mot(id_mot);
ALTER TABLE ecrit ADD CONSTRAINT FK_ecrit_id_article_article FOREIGN KEY (id_article_article) REFERENCES article(id_article);
ALTER TABLE ecrit ADD CONSTRAINT FK_ecrit_id_auteur_auteur FOREIGN KEY (id_auteur_auteur) REFERENCES auteur(id_auteur);
ALTER TABLE apparaitre ADD CONSTRAINT FK_apparaitre_id_racine_mot_racine FOREIGN KEY (id_racine_mot_racine) REFERENCES mot_racine(id_racine);
ALTER TABLE apparaitre ADD CONSTRAINT FK_apparaitre_id_article_article FOREIGN KEY (id_article_article) REFERENCES article(id_article);
ALTER TABLE apparaitre ADD CONSTRAINT FK_apparaitre_id_entite_entite FOREIGN KEY (id_entite_entite) REFERENCES entite(id_entite);
ALTER TABLE apparaitre ADD CONSTRAINT FK_apparaitre_id_pos_tag_pos_tagging FOREIGN KEY (id_pos_tag_pos_tagging) REFERENCES pos_tagging(id_pos_tag)</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE)</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE);
CALL PMOT("PHP", "JAVA", @ID_RACINE2);
SELECT @ID_RACINE</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE);
CALL PMOT("PHP", "JAVA", @ID_RACINE2);
SELECT @ID_RACINE;</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE);
CALL PMOT("PHP", "JAVA", @ID_RACINE);
SELECT @ID_RACINE;</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT('VBA', 'PYTHON', @ID_RACINE);
CALL PMOT('PHP', 'JAVA,', @ID_RACINE);
SELECT @ID_RACINE;</string>
		<string>-- CALL PMOT('LIL', 'LOL,', @ID_RACINE);
SELECT @ID_RACINE</string>
		<string>CALL PMOT('LIL', 'LOL,', @ID_RACINE)</string>
		<string>CALL PMOT('try', 'HA,', @ID_RACINE)</string>
		<string>SET @ID_RACINE=0;
CALL PMOT('COJAHZ', 'HA,NZEHA', @ID_RACINE)</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
SET @ID_RACINE=0;
CALL PMOT('COJAHZ', 'HA,NZEHA', @ID_RACINE);</string>
		<string>CALL PMOT('cigarette', 'cigar', @ID_RACINE)</string>
		<string>CALL PMOT('TRY2', 'HA,NZEHA', @ID_RACINE)</string>
		<string>CALL PMOT('COJAHZ', 'HA,NZEHA', @ID_RACINE)</string>
		<string>CALL PMOT('COJAHZ', 'HA,NZEHA')</string>
		<string>CALL PMOT('COJAHZ', 'HA,NZEHA', 1)</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE RACINE=VRACINE;

END;
SET @ID_RACINE=0;
CALL PMOT('COJAHZ', 'HA,NZEHA', @ID_RACINE);</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.20</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
